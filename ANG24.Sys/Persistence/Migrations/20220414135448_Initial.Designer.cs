// <auto-generated />
using System;
using ANG24.Sys.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ANG24.Sys.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220414135448_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.Property<int>("CustomersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomersId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("CustomerOrder");
                });

            modelBuilder.Entity("DeviceModule", b =>
                {
                    b.Property<int>("DevicesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModulesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DevicesId", "ModulesId");

                    b.HasIndex("ModulesId");

                    b.ToTable("DeviceModule");
                });

            modelBuilder.Entity("DeviceOrder", b =>
                {
                    b.Property<int>("DevicesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DevicesId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("DeviceOrder");
                });

            modelBuilder.Entity("Domain.DBModels.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.DBModels.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextVerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Synonym")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Zav_N")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceGroupId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Domain.DBModels.DeviceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceGroups");
                });

            modelBuilder.Entity("Domain.DBModels.DeviceParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Synonym")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UnitId");

                    b.ToTable("DeviceParameters");
                });

            modelBuilder.Entity("Domain.DBModels.EnergyObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnergyObjects");
                });

            modelBuilder.Entity("Domain.DBModels.Faze", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ConnectionImage")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestObjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestObjectId");

                    b.ToTable("Fazes");
                });

            modelBuilder.Entity("Domain.DBModels.FazeMeteringResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FazeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TestResult")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FazeId");

                    b.HasIndex("OrderId");

                    b.ToTable("FazeMeteringResults");
                });

            modelBuilder.Entity("Domain.DBModels.LogData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("LogDatas");
                });

            modelBuilder.Entity("Domain.DBModels.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Synonym")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Domain.DBModels.ModuleStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ModuleStages");
                });

            modelBuilder.Entity("Domain.DBModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnergyObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinishDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestTargetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnergyObjectId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("TestObjectId");

                    b.HasIndex("TestTargetId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.DBModels.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("Domain.DBModels.ParameterAddition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceParameterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ValueType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceParameterId");

                    b.ToTable("ParameterAdditions");
                });

            modelBuilder.Entity("Domain.DBModels.Prefix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CutName")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Factor")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Prefixes");
                });

            modelBuilder.Entity("Domain.DBModels.ResultValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceParameterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FazeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsServiceValue")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParameterAdditionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceParameterId");

                    b.HasIndex("FazeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParameterAdditionId");

                    b.ToTable("ResultValues");
                });

            modelBuilder.Entity("Domain.DBModels.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Domain.DBModels.TestObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DiametrSize")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Lehght")
                        .HasColumnType("REAL");

                    b.Property<string>("Mark")
                        .HasColumnType("TEXT");

                    b.Property<string>("Work_U")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestObjects");
                });

            modelBuilder.Entity("Domain.DBModels.TestTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestTargets");
                });

            modelBuilder.Entity("Domain.DBModels.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PrefixId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Synonim")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PrefixId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Domain.DBModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThirdName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CustomerOrder", b =>
                {
                    b.HasOne("Domain.DBModels.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DBModels.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceModule", b =>
                {
                    b.HasOne("Domain.DBModels.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DBModels.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceOrder", b =>
                {
                    b.HasOne("Domain.DBModels.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DBModels.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DBModels.Device", b =>
                {
                    b.HasOne("Domain.DBModels.DeviceGroup", "DeviceGroup")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceGroupId");

                    b.Navigation("DeviceGroup");
                });

            modelBuilder.Entity("Domain.DBModels.DeviceParameter", b =>
                {
                    b.HasOne("Domain.DBModels.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Domain.DBModels.Unit", "Unit")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("UnitId");

                    b.Navigation("Device");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.DBModels.Faze", b =>
                {
                    b.HasOne("Domain.DBModels.TestObject", "TestObject")
                        .WithMany("Fazes")
                        .HasForeignKey("TestObjectId");

                    b.Navigation("TestObject");
                });

            modelBuilder.Entity("Domain.DBModels.FazeMeteringResult", b =>
                {
                    b.HasOne("Domain.DBModels.Faze", "Faze")
                        .WithMany("FazeMeteringResults")
                        .HasForeignKey("FazeId");

                    b.HasOne("Domain.DBModels.Order", "Order")
                        .WithMany("FazeMeteringResults")
                        .HasForeignKey("OrderId");

                    b.Navigation("Faze");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.DBModels.LogData", b =>
                {
                    b.HasOne("Domain.DBModels.Session", "Session")
                        .WithMany("LogDatas")
                        .HasForeignKey("SessionId");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Domain.DBModels.ModuleStage", b =>
                {
                    b.HasOne("Domain.DBModels.User", "User")
                        .WithMany("ModuleStages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DBModels.Order", b =>
                {
                    b.HasOne("Domain.DBModels.EnergyObject", "EnergyObject")
                        .WithMany("Orders")
                        .HasForeignKey("EnergyObjectId");

                    b.HasOne("Domain.DBModels.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId");

                    b.HasOne("Domain.DBModels.TestObject", "TestObject")
                        .WithMany("Orders")
                        .HasForeignKey("TestObjectId");

                    b.HasOne("Domain.DBModels.TestTarget", "TestTarget")
                        .WithMany("Orders")
                        .HasForeignKey("TestTargetId");

                    b.Navigation("EnergyObject");

                    b.Navigation("OrderType");

                    b.Navigation("TestObject");

                    b.Navigation("TestTarget");
                });

            modelBuilder.Entity("Domain.DBModels.ParameterAddition", b =>
                {
                    b.HasOne("Domain.DBModels.DeviceParameter", "DeviceParameter")
                        .WithMany("ParameterAdditions")
                        .HasForeignKey("DeviceParameterId");

                    b.Navigation("DeviceParameter");
                });

            modelBuilder.Entity("Domain.DBModels.ResultValue", b =>
                {
                    b.HasOne("Domain.DBModels.Device", "Device")
                        .WithMany("ResultValues")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Domain.DBModels.DeviceParameter", "DeviceParameter")
                        .WithMany("ResultValues")
                        .HasForeignKey("DeviceParameterId");

                    b.HasOne("Domain.DBModels.Faze", "Faze")
                        .WithMany("ResultValues")
                        .HasForeignKey("FazeId");

                    b.HasOne("Domain.DBModels.Order", "Order")
                        .WithMany("ResultValues")
                        .HasForeignKey("OrderId");

                    b.HasOne("Domain.DBModels.ParameterAddition", "ParameterAddition")
                        .WithMany("ResultValues")
                        .HasForeignKey("ParameterAdditionId");

                    b.Navigation("Device");

                    b.Navigation("DeviceParameter");

                    b.Navigation("Faze");

                    b.Navigation("Order");

                    b.Navigation("ParameterAddition");
                });

            modelBuilder.Entity("Domain.DBModels.Session", b =>
                {
                    b.HasOne("Domain.DBModels.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DBModels.Unit", b =>
                {
                    b.HasOne("Domain.DBModels.Prefix", "Prefix")
                        .WithMany("Units")
                        .HasForeignKey("PrefixId");

                    b.Navigation("Prefix");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.DBModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DBModels.Device", b =>
                {
                    b.Navigation("DeviceParameters");

                    b.Navigation("ResultValues");
                });

            modelBuilder.Entity("Domain.DBModels.DeviceGroup", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Domain.DBModels.DeviceParameter", b =>
                {
                    b.Navigation("ParameterAdditions");

                    b.Navigation("ResultValues");
                });

            modelBuilder.Entity("Domain.DBModels.EnergyObject", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.DBModels.Faze", b =>
                {
                    b.Navigation("FazeMeteringResults");

                    b.Navigation("ResultValues");
                });

            modelBuilder.Entity("Domain.DBModels.Order", b =>
                {
                    b.Navigation("FazeMeteringResults");

                    b.Navigation("ResultValues");
                });

            modelBuilder.Entity("Domain.DBModels.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.DBModels.ParameterAddition", b =>
                {
                    b.Navigation("ResultValues");
                });

            modelBuilder.Entity("Domain.DBModels.Prefix", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("Domain.DBModels.Session", b =>
                {
                    b.Navigation("LogDatas");
                });

            modelBuilder.Entity("Domain.DBModels.TestObject", b =>
                {
                    b.Navigation("Fazes");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.DBModels.TestTarget", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.DBModels.Unit", b =>
                {
                    b.Navigation("DeviceParameters");
                });

            modelBuilder.Entity("Domain.DBModels.User", b =>
                {
                    b.Navigation("ModuleStages");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
